package com.zensar.service;

import java.awt.print.Pageable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.zensar.dto.Stock;
import com.zensar.entity.StockEntity;
import com.zensar.repo.StockRepo;



@Service(value = "JPA_SERVICE")
public class ServiceImp implements StockService {

	@Autowired
	StockRepo stockRepo;
	
	@Autowired
	ModelMapper modelMapper;
	
	@Override
	public Stock createNewStock(Stock stock) {

		StockEntity stockEntity = this.modelMapper.map(stock, StockEntity.class);
		
		stockEntity = stockRepo.save(stockEntity);
		
		Stock stocks = this.modelMapper.map(stockEntity, Stock.class);
		
		return stocks;
	}
	
	private Stock getStock(StockEntity stockEntity) {
		
		

		return this.modelMapper.map(stockEntity, Stock.class);
	}
	
	private StockEntity getStockEntity(Stock stock) {
		
		StockEntity stockEntity = this.modelMapper.map(stock, StockEntity.class);
		
		return stockEntity;
	}

	@Override
	public boolean deleteAllStocks() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean deleteStockById(int stockId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Stock updateStock(int stockId, Stock stock) {
	
		
	
	if (stockRepo.findById(stockId).isPresent()) {
	
		Optional<StockEntity> opStockEntity = stockRepo.findById(stockId);
		if(opStockEntity.isPresent()) { //Correct stockId
			StockEntity stockEntity = opStockEntity.get();
			/*
			stockEntity.setMarketName(stock.getMarketName());
			stockEntity.setName(stock.getName());
			stockEntity.setPrice(stock.getPrice());
			*/
		
			stockEntity = this.modelMapper.map(stock, StockEntity.class);
			stockEntity = stockRepo.save(stockEntity);
			Stock stockDto = this.modelMapper.map(stockEntity, Stock.class);
			return stockDto;
		}
	}
		
	return null;
	}

	@Override
	public Stock getStockById(int stockId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Stock> getAllStock() {
	
	List<StockEntity> list	= stockRepo.findAll();
		
	return getStockListFromEntity(list);
	}
	
	private List<Stock> getStockListFromEntity(List<StockEntity> stockEntityList) {
	
		List<Stock>stockList = new ArrayList<Stock>();
		
		for(StockEntity stockEntity : stockEntityList) {
			
			stockList.add(getStock(stockEntity));
		}
		return stockList;
	}

	//@Override
		public List<Stock> findByMarketName(String marketName) {
			List<StockEntity> stockEntityList = stockRepo.findByMarket(marketName);
			return getStockListFromEntity(stockEntityList);
		}

		//@Override
		public List<Stock> findByName(String name) {
			List<StockEntity> stockEntityList = stockRepo.findByName(name);
			return getStockListFromEntity(stockEntityList);
		}

		//@Override
		public List<Stock> findByNameAndMarket(String name, String marketName) {
			List<StockEntity> stockEntityList = stockRepo.findByNameAndMarket(name, marketName);
			return getStockListFromEntity(stockEntityList);
		}

		//@Override
		public List<Stock> findByNameLike(String name) {
			List<StockEntity> stockEntityList = stockRepo.findByNameLike(name);
			return getStockListFromEntity(stockEntityList);
		}

		//@Override
		public List<Stock> findByOrderByName(String sortType) {
			List<StockEntity> stockEntityList = null;
			if("ASC".equalsIgnoreCase(sortType)) {
				stockEntityList = stockRepo.findByOrderByNameAsc();
				/*
				List<Sort.Order> sortOrders = new ArrayList<Sort.Order>();
				Sort.Order order_1 = new Sort.Order(Sort.Direction.ASC, "name");
				Sort.Order order_2 = new Sort.Order(Sort.Direction.DESC, "marketName");
				sortOrders.add(order_1);
				sortOrders.add(order_2);
				stockEntityList = stockRepository.findAll(Sort.by(sortOrders));
				stockEntityList = stockRepository.findAll(Sort.by(new Sort.Order(Sort.Direction.DESC, "price")));
				*/
			}
			if("DESC".equalsIgnoreCase(sortType)) {
				stockEntityList = stockRepo.findByOrderByNameDesc();
			}
			return getStockListFromEntity(stockEntityList);
		}

		//@Override
		public List<Stock> findByPage(int startIndex, int records) {
			org.springframework.data.domain.Pageable pageWithFewRecords = PageRequest.of(startIndex, records);
		
			Page<StockEntity> stockEntityPage = stockRepo.findAll(pageWithFewRecords);
			
			List<StockEntity> stockEntityList = stockEntityPage.getContent();
			
			return getStockListFromEntity(stockEntityList);
		}

	
	

}
